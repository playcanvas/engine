<!DOCTYPE html>
<html>
<head>
    <script crossorigin src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/regenerator-runtime@0.13.9/runtime.min.js"> </script>
    <script src="{{{enginePath}}}"></script>
    <script src="../../build/playcanvas-extras.js"></script>
    <script src="../../build/playcanvas-observer.js"></script>
    <script src="../../build/wasm-loader.js"></script>
    <link rel="stylesheet" href="/styles.css">
    <style>
        body {
            margin: 0;
            overflow-y: hidden;
        }
        #application-canvas {
            width: 100%;
            height: 100%;
        }
    </style>
</head>

<body>
    <div id="app">
        <div id="appInner">
            <canvas id='application-canvas'></canvas>
        </div>
    </div>
    <script>
        {{{ exampleConstValues }}}.forEach(function(s) {
            window[s.k] = s.v;
        });

        function loadExample(exampleFunction, loadFunction, controlsFunction) {
            var data = new observer.Observer({});
            window.top.observerData = data;
            window.top.pc = pc;

            var canvas = document.getElementById('application-canvas');

            var app = new pc.Application(canvas, {
                mouse: new pc.Mouse(document.body),
                touch: new pc.TouchDevice(document.body),
                elementInput: new pc.ElementInput(canvas),
                gamepads: new pc.GamePads(),
                keyboard: new pc.Keyboard(window),
                graphicsDeviceOptions: {
                    alpha: true
                }
            });

            var miniStats = new pcx.MiniStats(app);

            var queryString = window.location.search;
            var urlParams = new URLSearchParams(queryString);
            if (urlParams.get('miniStats') === 'false') {
                miniStats.enabled = false;
            }

            app.on('update', function () {
                if (window.top._showMiniStats !== undefined) miniStats.enabled = window.top._showMiniStats;
            });

            var canvasContainerElement = canvas.parentElement;
            canvas.setAttribute('width', window.innerWidth + 'px');
            canvas.setAttribute('height', window.innerHeight + 'px');
            var resizeTimeout = null;
            app.setCanvasResolution(pc.RESOLUTION_AUTO);
            if (ResizeObserver) {
                new ResizeObserver(function() {
                    if (resizeTimeout) {
                        window.clearTimeout(resizeTimeout);
                    }
                    resizeTimeout = setTimeout(function () {
                        canvas.width = canvasContainerElement.clientWidth;
                        canvas.height = canvasContainerElement.clientHeight;
                    });
                }).observe(canvasContainerElement);
            }

            var assets;
            if (!loadFunction) {
                assets = [];
            } else {
                assets = loadFunction().props.children;
                if (!Array.isArray(assets)) {
                    assets = [assets];
                }
            }

            assets = assets.map(function (c) {
                return c.props;
            });

            var manifest = {};

            // count of assets to load
            var count = assets.length;

            function onLoadedResource(key, asset) {
                count--;
                if (key) {
                    manifest[key] = asset;
                }
                if (count <= 0) {
                    if (location.pathname.includes('misc/mini-stats')) {
                        exampleFunction(app, canvas, pcx);
                    } else {
                        exampleFunction(app, canvas, manifest, data);
                    }
                    var event = new CustomEvent("exampleLoad");
                    window.top.dispatchEvent(event);
                }
            }

            if (assets.length === 0) {
                onLoadedResource();
            }

            assets.forEach(function (resource) {
                if (!resource.type) {
                    fetch(resource.url)
                        .then(function(response) { return response.text() })
                        .then(function(data) {
                            var module = {
                                exports: {}
                            };
                            window[resource.name] = (Function('module', 'exports', data).call(module, module, module.exports), module).exports;
                            onLoadedResource();
                        });
                    return;
                }
                if (resource.data) {
                    var asset = new pc.Asset(
                        resource.name,
                        resource.type,
                        resource.type === "cubemap" ? {
                            url: resource.url
                        } : null,
                        resource.data
                    );
                    asset.on("load", function (asset) {
                        onLoadedResource(resource.name, asset);
                    });
                    app.assets.add(asset);
                    app.assets.load(asset);
                } else {
                    app.assets.loadFromUrl(resource.url, resource.type, function (
                        err,
                        asset
                    ) {
                        if (!err && asset) {
                            onLoadedResource(resource.name, asset);
                        }
                    });
                }
            });
        }

        {{{ exampleClass }}}

        pc.basisInitialize({
            glueUrl: '../../static/lib/basis/basis.wasm.js',
            wasmUrl: '../../static/lib/basis/basis.wasm.wasm',
            fallbackUrl: '../../static/lib/basis/basis.js'
        });


        var e = new Example();

        var useTypeScript = window.top.localStorage.getItem('useTypeScript') === 'true';

        var exampleFunction = window.top.localStorage.getItem(window.top.location.hash.replace('#', ''));
        if (!exampleFunction) {
            exampleFunction = e.example
        } else {
            if (useTypeScript) {
                exampleFunction = window.top.Babel.transform(exampleFunction, {
                    retainLines: true,
                    filename: `transformedScript.tsx`,
                    presets: ["react", "typescript", "env"]
                }).code;
            }
            exampleFunction = new Function('app', 'canvas', 'assets', 'data', exampleFunction);
        }
        loadExample.bind(this)(exampleFunction, e.load, e.controls);
    </script>
</body>

</html>