<!DOCTYPE html>
<html>
    <head>
        <title>GLB inspector</title>
        <script>
            var DataViewLe = function (data) {
                this._data = new DataView(data);
            };

            DataViewLe.prototype = {
                getUint32: function (offset) {
                    return this._data.getUint32(offset, true);
                }
            };

            var GlbFile = function (buffer) {
                var data = new DataViewLe(buffer);

                // header
                this.magic = data.getUint32(0);
                this.version = data.getUint32(4);
                this.length = data.getUint32(8);

                // chunks
                this.chunks = [];
                var offset = 12;
                while (offset < this.length) {
                    var chunkLength = data.getUint32(offset);
                    var chunkType = data.getUint32(offset + 4);
                    var chunkData = new Uint8Array(buffer, offset + 8, chunkLength);
                    this.chunks.push( { length: chunkLength, type: chunkType, data: chunkData } );
                    offset += chunkLength + 8;
                }
            };

            GlbFile.prototype = {
                getChunk: function (index) {
                    return this.chunks[index];
                },

                getJsonChunk: function () {
                    return this._decodeBinaryUtf8(this.getChunk(0).data);
                },

                _decodeBinaryUtf8: function (array) {
                    if (typeof TextDecoder !== 'undefined') {
                        return new TextDecoder().decode(array);
                    }

                    var str = "";
                    for (var i = 0, len = array.length; i < len; i++) {
                        str += String.fromCharCode(array[i]);
                    }

                    return decodeURIComponent(escape(str));
                }
            };

            var generateGltfStats = function (glb) {

                var file = new GlbFile(glb);
                var json = file.getJsonChunk();
                var gltf = JSON.parse(json);

                var stats = {
                    bytes: {
                        total: glb.byteLength,
                        breakdown: {
                            gltf: file.getChunk(0).data.byteLength,
                            bin: {
                                total: file.getChunk(1).data.byteLength,
                                breakdown: {
                                    vertex: {
                                        total: 0,
                                        breakdown: {

                                        }
                                    },
                                    index: 0,
                                    animations: 0,
                                }
                            }
                        }
                    },
                    vertices: {
                        total: 0,
                        breakdown: {
                        }
                    },
                    triangles: {
                        total: 0,
                    },
                    meshes: {
                        total: 0,
                    },
                    nodes: {
                        total: 0,
                        meshed: 0,
                        skinned: 0,
                    },
                    animations: {
                        total: 0,
                        channels: {
                            total: 0,
                            breakdown: {

                            }
                        }
                    }
                };

                var getNumComponents = function (accessorType) {
                    switch (accessorType) {
                        case 'SCALAR': return 1;
                        case 'VEC2': return 2;
                        case 'VEC3': return 3;
                        case 'VEC4': return 4;
                        case 'MAT2': return 4;
                        case 'MAT3': return 9;
                        case 'MAT4': return 16;
                        default: return 3;
                    }
                }
                
                var getComponentSizeInBytes = function (componentType) {
                    switch (componentType) {
                        case 5120: return 1;    // int8
                        case 5121: return 1;    // uint8
                        case 5122: return 2;    // int16
                        case 5123: return 2;    // uint16
                        case 5125: return 4;    // uint32
                        case 5126: return 4;    // float32
                        default: return 0;
                    }
                }

                // run through accessors
                var accessorSizeBytes = [ ];
                for (var i=0; i<gltf.accessors.length; ++i) {
                    var accessor = gltf.accessors[i];
                    accessorSizeBytes.push(getComponentSizeInBytes(accessor.componentType) *
                                           getNumComponents(accessor.type) *
                                           accessor.count);
                }

                var doneAccessors = [ ];

                var inc = function (struct, key, value) {
                    if (!struct.hasOwnProperty(key)) {
                        struct[key] = value;
                    } else {
                        struct[key] += value;
                    }
                };

                // meshes
                if (gltf.hasOwnProperty('meshes')) {
                    for (var i=0; i<gltf.meshes.length; ++i) {
                        var mesh = gltf.meshes[i];
                        for (var j=0; j<mesh.primitives.length; ++j) {
                            var primitive = mesh.primitives[j];

                            stats.meshes.total++;

                            // vertex data
                            for (var key in primitive.attributes) {
                                if (primitive.attributes.hasOwnProperty(key)) {
                                    var accessor = primitive.attributes[key];
                                    if (!doneAccessors[accessor]) {
                                        doneAccessors[accessor] = 1;

                                        if (key === "POSITION") {
                                            stats.vertices.total += gltf.accessors[accessor].count;
                                        }
                                        inc(stats.vertices.breakdown, key, gltf.accessors[accessor].count);
                                        stats.bytes.breakdown.bin.breakdown.vertex.total += accessorSizeBytes[accessor];
                                        inc(stats.bytes.breakdown.bin.breakdown.vertex.breakdown, key, accessorSizeBytes[accessor]);
                                    }
                                }
                            }

                            // index data
                            if (primitive.hasOwnProperty('indices')) {
                                var accessor = primitive.indices;
                                if (!doneAccessors[accessor]) {
                                    doneAccessors[accessor] = 1;
                                    // FIXME: handle the different types of geometry
                                    stats.triangles.total += gltf.accessors[accessor].count / 3;
                                    stats.bytes.breakdown.bin.breakdown.index += accessorSizeBytes[accessor];
                                }
                            }
                        }
                    }
                }

                // nodes
                for (var i=0; i<gltf.nodes.length; ++i) {
                    var node = gltf.nodes[i];
                    stats.nodes.total++;
                    if (node.hasOwnProperty('mesh')) {
                        stats.nodes.meshed++;
                    }
                    if (node.hasOwnProperty('skin')) {
                        stats.nodes.skinned++;
                    }
                }

                // animations
                if (gltf.hasOwnProperty('animations')) {
                    for (var i=0; i<gltf.animations.length; ++i) {
                        var animation = gltf.animations[i];
                        stats.animations.total++;

                        var samplers = animation.samplers;
                        for (var j=0; j<samplers.length; ++j) {
                            var sampler = samplers[j];

                            if (!doneAccessors[sampler.input]) {
                                doneAccessors[sampler.input] = 1;
                                stats.bytes.breakdown.bin.breakdown.animations += accessorSizeBytes[sampler.input];
                            }

                            if (!doneAccessors[sampler.output]) {
                                doneAccessors[sampler.output] = 1;
                                stats.bytes.breakdown.bin.breakdown.animations += accessorSizeBytes[sampler.output];
                            }
                        }

                        var channels = animation.channels;
                        for (var j=0; j<channels.length; ++j) {
                            var channel = channels[j];
                            stats.animations.channels.total++;
                            inc(stats.animations.channels.breakdown, channel.target.path, 1);
                        }
                    }
                }

                return {
                    stats: stats,
                    gltf: gltf
                };
            };
        </script>
    </head>
    <body>
        <div style="font-family: monospace;white-space:pre" id="text_things">Drop GLB file here</div>
        <script>
            var preventDefault = function (ev) {
                ev.preventDefault();
            }
            var dropHandler = function (ev) {
                preventDefault(ev);

                if (ev.dataTransfer) {
                    const items = ev.dataTransfer.items;
                    if (items && items.length === 1 && items[0].kind === 'file') {
                        const file = items[0].getAsFile();
                        console.log('reading file=' + file.name);
                        file.arrayBuffer()
                        .then(arrayBuffer => {
                            document.getElementById("text_things").innerHTML =
                                JSON.stringify(generateGltfStats(arrayBuffer), null, 4);
                        })
                    }
                }
            }
            window.addEventListener('dragenter', preventDefault, false);
            window.addEventListener('dragover', preventDefault, false);
            window.addEventListener('drop', dropHandler, false);
        </script>
    </body>
</html>
